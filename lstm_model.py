# -*- coding: utf-8 -*-
"""LSTM_Model

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18vmDHC_5r6UB-0fwltw33RXy8YKMMYAR

# LSTM
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn import preprocessing
from keras.models import Sequential
from keras.layers import Conv1D,MaxPool1D,Bidirectional,LSTM,Dropout,TimeDistributed
from keras.layers import Dense,GlobalAveragePooling2D
import matplotlib.pyplot as plt
from sklearn.preprocessing import MinMaxScaler

stock = pd.read_excel('/content/ADCcode.xlsx',index_col="date", parse_dates=True)

scaler = MinMaxScaler(feature_range=(0,1))
scaled_data = scaler.fit_transform(stock['close'].values.reshape(-1,1))

window_size = 100
X = []
Y = []

for i in range(0 , len(stock) - window_size -1 , 1):
    X.append(np.array(stock.iloc[i:i+window_size,4]).reshape(window_size,1))
    Y.append(np.array(stock.iloc[i+window_size,4]).reshape(1,1))
train_X,test_X,train_label,test_label = train_test_split(X, Y, test_size=0.1,shuffle=False)
train_X = np.array(train_X)
test_X = np.array(test_X)
train_label = np.array(train_label)
test_label = np.array(test_label)
model2 = Sequential()
#add model layers
print(len(test_X))
model2.add((LSTM(128,return_sequences=True)))
model2.add((LSTM(64,return_sequences=False)))
model2.add(Dense(16, activation='relu'))
model2.add(Dense(1, activation='linear'))
model2.compile(optimizer='RMSprop', loss='mse', metrics=['mse', 'mae'])

model2.fit(train_X, train_label, validation_data=(test_X,test_label), epochs=40,batch_size=40,shuffle=False)
print(model2.evaluate(test_X,test_label))

len_t = len(train_X)
predicted  = model2.predict(test_X)
test_label = (test_label[:,0])
predicted = np.array(predicted[:,0]).reshape(-1,1)
for j in range(len_t , len_t + len(test_X)):
    temp =stock.iloc[j,4]
    test_label[j - len_t] = test_label[j - len_t] * temp + temp
    predicted[j - len_t] = predicted[j - len_t] * temp + temp
plt.plot(test_label, color = 'black', label = ' Stock Price')
plt.plot(predicted, color = 'green', label = 'Predicted  Stock Price')
plt.title('Stock Prediction by LSTM Model')
plt.xlabel('Time')
plt.ylabel(' Stock Price')
plt.legend()
plt.show()